class MedianFinder {
    PriorityQueue<Integer> leftMaxHeap;
    PriorityQueue<Integer> rightMinHeap;
    public MedianFinder() {
        leftMaxHeap=new PriorityQueue<>((a,b)->b-a);
        rightMinHeap=new PriorityQueue<>();
    }
    
    public void addNum(int num) {
        if(leftMaxHeap.size()==0 || num <= leftMaxHeap.peek()){
            leftMaxHeap.add(num);
        }else{
            rightMinHeap.add(num);
        }
        if(leftMaxHeap.size()>rightMinHeap.size()+1){
            rightMinHeap.add(leftMaxHeap.peek());
            leftMaxHeap.poll();
        }
        if(leftMaxHeap.size()<rightMinHeap.size()){
            leftMaxHeap.add(rightMinHeap.peek());
            rightMinHeap.poll();
        }
    }
    
    public double findMedian() {
        if(leftMaxHeap.size()==rightMinHeap.size()){
            return (double)(leftMaxHeap.peek()+rightMinHeap.peek())/(double)2;
        }
        return (double)leftMaxHeap.peek();
    }
}

/**
 * Your MedianFinder object will be instantiated and called as such:
 * MedianFinder obj = new MedianFinder();
 * obj.addNum(num);
 * double param_2 = obj.findMedian();
 */
