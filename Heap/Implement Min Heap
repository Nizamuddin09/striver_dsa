import java.util.* ;
import java.io.*; 

public class Solution {

    // minHeap function which take size of Queries and Queries as Input.
// Returns an array out outputs depending on the query.
    static int[] minHeap(int n, int[][] q) {
        // Write your code here.
        MinHeap m=new MinHeap(n);

        int tot = 0;
        for(int i=0;i<n;i++){
            if(q[i][0]==1)tot++;
        }

        int[] ans = new int[tot];
        int ind=0;
        for(int i=0;i<n;i++){
            if(q[i][0]==0){
                m.insert(q[i][1]);
            }
            else{
                ans[ind++]=m.getMin();
            }
        }
        return ans;

    }
}
class MinHeap{
    int []heap;
    int maxSize;
    int size=0;
    MinHeap(int n){
        heap=new int[n];
        maxSize=n;
    }
    private int left(int i){
        return 2*i+1;
    }
    private int right(int i){
        return 2*i+2;
    }
    private int parent(int i){
        return (i-1)/2;
    }
    private void swap(int x,int y){
        int temp=heap[x];
        heap[x]=heap[y];
        heap[y]=temp;
    }
    private void heapify(int i){
        int l=left(i);
        int r=right(i);
        int smallest=i;
        if(l<size && heap[l]<heap[i]){
            smallest=l;
        }
        if(r<size && heap[r]<heap[smallest]){
            smallest=r;
        }
        if(smallest!=i){
            swap(smallest,i);
            heapify(smallest);
        }
    }
    public void insert(int x){
        if(size>=maxSize) return;
        if(size==0){
            heap[size++]=x;
            return;
        }
        heap[size++]=x;
        int index=size-1;
        int p=parent(index);
        while(index!=0 && heap[index]<heap[p]){
            swap(index,p);
            index=p;
            p=parent(index);
        }
    }
    public int getMin(){
        int min=heap[0];
        heap[0]=heap[size-1];
        size--;
        heapify(0);
        return min;
    }
}
