nlogn

class Solution {
    public int findKthLargest(int[] nums, int k) {
         final int N = nums.length;
        Arrays.sort(nums);
        return nums[N - k];
    }
}

nlogk

class Solution {
    public int findKthLargest(int[] nums, int k) {
        MaxHeap h=new MaxHeap(nums.length);
        int ans=Integer.MIN_VALUE;
        for(int i=0;i<nums.length;i++){
            h.insert(nums[i]);
        }
        for(int i=0;i<k;i++){
            ans=h.getMax();
        }
        return ans;
    }
}
class MaxHeap{
    int []heap;
    int maxSize;
    int size=0;
    MaxHeap(int n){
        heap=new int[n];
        maxSize=n;
    }
    private int left(int i){
        return 2*i+1;
    }
    private int right(int i){
        return 2*i+2;
    }
    private int parent(int i){
        return (i-1)/2;
    }
    private void swap(int x,int y){
        int temp=heap[x];
        heap[x]=heap[y];
        heap[y]=temp;
    }
    private void heapify(int i){
        int l=left(i);
        int r=right(i);
        int largest=i;
        if(l<size && heap[l]>heap[i]){
            largest=l;
        }
        if(r<size && heap[r]>heap[largest]){
            largest=r;
        }
        if(largest!=i){
            swap(largest,i);
            heapify(largest);
        }
    }
    public void insert(int x){
        if(size>=maxSize) return;
        if(size==0){
            heap[size++]=x;
            return;
        }
        heap[size++]=x;
        int index=size-1;
        int p=parent(index);
        while(index!=0 && heap[index]>heap[p]){
            swap(index,p);
            index=p;
            p=parent(index);
        }
    }
    public int getMax(){
        int min=heap[0];
        heap[0]=heap[size-1];
        size--;
        heapify(0);
        return min;
    }
}

nlogk

class Solution {
    public int findKthLargest(int[] nums, int k) {
        PriorityQueue<Integer> pq=new PriorityQueue<>();
        for(int val:nums){
            pq.offer(val);
            if(pq.size()>k){
                pq.poll();
            }
        }
        return pq.peek();
    }
}

nlogk

class Solution {
    public int findKthLargest(int[] nums, int k) {
        PriorityQueue<Integer> pq=new PriorityQueue<>((a,b)->b-a);
        int ans=Integer.MIN_VALUE;
        for(int i=0;i<nums.length;i++){
            pq.offer(nums[i]);
        }
        for(int i=0;i<k;i++){
            ans=pq.poll();
        }
        return ans;
    }
}

o(n) quick select

class Solution {
    public int findKthLargest(int[] nums, int k) {
        int n=nums.length;
        int low=0;
        int high=n-1;
        int pIndex=0;
        while(true){
            pIndex=partition(nums,low,high);
            if(pIndex==k-1){
                break;
            }
            if(k-1<pIndex){
                high=pIndex-1;
            }
            if(k>pIndex){
                low=pIndex+1;
            }
        }
        return nums[pIndex];
    }
    public int partition(int nums[],int low,int high){
        random(nums,low,high);
        int pivot=nums[low];
        int i=low+1;
        int j=high;
        while(i<=j){
            if(nums[i]<pivot && nums[j]>pivot){
                swap(nums,i,j);
                i++;
                j--;
            }
            if(nums[i]>=pivot){
                i++;
            }
            if(nums[j]<=pivot){
                j--;
            }
        }
        swap(nums,low,j);
        return j;
    }
    public void swap(int arr[],int x,int y){
        int temp=arr[x];
        arr[x]=arr[y];
        arr[y]=temp;
    }
    public void random(int nums[],int low,int high){
        Random rand=new Random();
        int pivot=rand.nextInt(high-low+1)+low;
        swap(nums,pivot,low);
    }
}
