public class Solution {
    public int[] solve(int[] A, int[] B, int C) {
        int n=A.length;
        PriorityQueue<Node> pq=new PriorityQueue<>((a,b)->b.sum-a.sum);
        Arrays.sort(A);
        Arrays.sort(B);
        HashSet<String> hs=new HashSet<>();
        pq.add(new Node(A[n-1]+B[n-1],n-1,n-1));
        hs.add(new String((n-1)+" "+(n-1)));
        int i=n-1,j=n-1;
        int ans[]=new int[C];
        for(int p1=0;p1<C;p1++){
            ans[p1]=pq.peek().sum;
            
            i=pq.peek().i;
            j=pq.peek().j;
            pq.poll();
            if(i>0 && j>0){
                if(!hs.contains(new String((i-1)+" "+j))){
                pq.add(new Node(A[i-1]+B[j],i-1,j));
                     hs.add(new String((i-1)+" "+j));

  
                }
                
                if(!hs.contains(new String(i+" "+(j-1)))){
                pq.add(new Node(A[i]+B[j-1],i,j-1));
               
                hs.add(new String(i+" "+(j-1)));
                }
                
            }
        }
        return ans;
    }
}
class Node{
    int sum;
    int i;
    int j;
    Node(int sum,int i,int j){
        this.sum=sum;
        this.i=i;
        this.j=j;
    }
}
