import java.util.ArrayList;

public class Solution {
	public static ArrayList<Integer> traverseBoundary(TreeNode root){
		// Write your code here.
        ArrayList<Integer> result = new ArrayList<>() ;
        if(root == null) return result;
        if(!isLeaf(root)){result.add(root.data);};
        leftBoundary(root,result);
        preOrder(root,result);
        rightBoundary(root,result);
        return result;
    }
    public static boolean isLeaf(TreeNode node){
        return node.left==null && node.right==null;
    }
    public static void leftBoundary(TreeNode root,ArrayList<Integer> result){
        if(root.left==null) return;
        TreeNode curr=root.left;
        while(!isLeaf(curr)){
            result.add(curr.data);
            if(curr.left!=null){
                curr=curr.left;
            }else{
                curr=curr.right;
            }
        }
    }
        public static void rightBoundary(TreeNode root,ArrayList<Integer> result){
        if(root.right==null) return;
        TreeNode curr=root.right;
            Stack<Integer> s=new Stack<Integer>();
        while(!isLeaf(curr)){
            s.push(curr.data);
            if(curr.right!=null){
                curr=curr.right;
            }else{
                curr=curr.left;
            }
        }
            while(!s.isEmpty()){
                result.add(s.pop());
            }
        }
    public static void preOrder(TreeNode root,ArrayList<Integer> result){       if(root==null) return;
        if(isLeaf(root)) result.add(root.data);
        preOrder(root.left,result);
        preOrder(root.right,result);
    }
}
