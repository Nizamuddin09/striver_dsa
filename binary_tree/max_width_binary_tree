/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Pair{
    TreeNode node;
    int index;
    Pair(TreeNode root,int num){
     node=root;
     index=num;
    }
}
class Solution {
    public int widthOfBinaryTree(TreeNode root) {
        if(root==null) return 0;
        int ans=0;
        Queue<Pair> q=new LinkedList<>();
        q.add(new Pair(root,0));
        while(!q.isEmpty()){
            int first=0,last=0;
            int n=q.size();
            int min=q.peek().index;   //int overflow avoid
            for(int i=0;i<n;i++){
                Pair temp=q.poll();
                if(temp.node.left!=null){
                    q.add(new Pair(temp.node.left,2*(temp.index-min)+1));
                }
                if(temp.node.right!=null){
                    q.add(new Pair(temp.node.right,2*(temp.index-min)+2));
                }
                if(i==0){
                    first=temp.index;
                }
                if(i==(n-1)){
                    last=temp.index;
                }
            }
            ans=Math.max(last-first+1,ans);
        }
        return ans;
    }
}
