/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Pair{
    TreeNode node;
    int hd;
    int vd;
    Pair(TreeNode n,int hd,int vd){
    this.node=n;
    this.hd=hd;
    this.vd=vd;
    }
}
class Solution {
    public List<List<Integer>> verticalTraversal(TreeNode root) {
        Queue<Pair> q=new LinkedList<>();
        TreeMap<Integer,TreeMap<Integer,PriorityQueue<Integer>>> m=new TreeMap<>();
        List<List<Integer>> result=new ArrayList<>();
        q.add(new Pair(root,0,0));
        while(!q.isEmpty()){
            Pair temp=q.poll();
            TreeNode node=temp.node;
            int x=temp.hd;
            int y=temp.vd;
            if(!m.containsKey(x)){
                m.put(x,new TreeMap<>());
            }
              if (!m.get(x).containsKey(y)) {
                m.get(x).put(y, new PriorityQueue < > ());
            }
            m.get(x).get(y).add(node.val);
                       if (node.left != null) {
                q.add(new Pair(node.left, x - 1, y + 1));
            }
            if (node.right != null) {
                q.add(new Pair(node.right, x + 1, y + 1));
            }
        }
        for(TreeMap<Integer,PriorityQueue<Integer>> ys:m.values()){
            result.add(new ArrayList<>());
            for (PriorityQueue < Integer > nodes: ys.values()) {
                while (!nodes.isEmpty()) {
                    result.get(result.size() - 1).add(nodes.poll());
                }
            }
        }
        return result;
    }
}


Pre-order dfs

