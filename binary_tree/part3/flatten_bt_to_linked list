//Recursive

class Solution {
    public void flatten(TreeNode root) {
        TreeNode prev[]=new TreeNode[1];
        prev[0]=null;
        helper(root,prev);
    }
    public static void helper(TreeNode root,TreeNode[] prev){
        if(root==null){
            return;
        }
        helper(root.right,prev);
        helper(root.left,prev);
        root.right=prev[0];
        root.left=null;
        prev[0]=root;
    }
}


 //using stack
class Solution {
    public void flatten(TreeNode root) {
        if(root==null) return;
        Stack<TreeNode> s =new Stack<TreeNode>();
        s.push(root);
        while(!s.isEmpty()){
            TreeNode curr=s.pop();
            if(curr.right!=null){
                s.push(curr.right);
            }
            if(curr.left!=null){
                s.push(curr.left);
            }
            if(!s.isEmpty()) curr.right=s.peek();
            curr.left=null;
        }

    }
}



 //morris O(1) space
class Solution {
    public void flatten(TreeNode root) {
        TreeNode curr=root;
        while(curr!=null){
            if(curr.left!=null){
                TreeNode prev=curr.left;
                while(prev.right!=null){
                    prev=prev.right;
                }
                prev.right=curr.right;
                curr.right=curr.left;
                curr.left=null;
            }
            curr=curr.right;
        }
    }
}
