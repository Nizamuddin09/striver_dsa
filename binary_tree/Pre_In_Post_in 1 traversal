import java.util.* ;
import java.io.*; 
/************************************************************

	Following is the Binary Tree node structure:

	class BinaryTreeNode<T> {
	    T data;
	    BinaryTreeNode<T> left;
	    BinaryTreeNode<T> right;

	    public BinaryTreeNode(T data) {
	        this.data = data;
	    }
	}

************************************************************/
class Pair {
    BinaryTreeNode node;
    int visit;
    Pair(BinaryTreeNode _node, int _num) {
        visit= _num;
        node = _node;
    }
}
public class Solution {
    public static List<List<Integer>> getTreeTraversal(BinaryTreeNode<Integer> root) {
        // Write your code here.
           List<List<Integer>> result=new ArrayList<>();
        
        if (root == null) return result;
        ArrayList<Integer> in= new ArrayList<Integer>();
            ArrayList<Integer> pre= new ArrayList<Integer>();
            ArrayList<Integer> post= new ArrayList<Integer>();
        Stack<Pair> s=new Stack<Pair>();
        s.push(new Pair(root,1));
        while(!s.isEmpty()){
            Pair temp=s.pop();
            if(temp.visit==1){
                pre.add((Integer)temp.node.data);
                s.push(new Pair(temp.node,2));
                if(temp.node.left!=null){
                    s.push(new Pair(temp.node.left,1));
                }
            }
            
            if(temp.visit==2){
                in.add((Integer)temp.node.data);
                s.push(new Pair(temp.node,3));
                if(temp.node.right!=null){
                    s.push(new Pair(temp.node.right,1));
                }
            }
            
            if(temp.visit==3){
                post.add((Integer)temp.node.data);
               
            }
        }
    
     
        result.add(in);
        result.add(pre);
        result.add(post);
        return result;
    }
}
