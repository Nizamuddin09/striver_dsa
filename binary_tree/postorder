/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
        LinkedList<Integer> post=new LinkedList<Integer>();
//        helper(root,post);
        Stack<TreeNode> s= new Stack<TreeNode>();
        // if(root==null) return post;
        // s.push(root);
        // while(!s.isEmpty()){
        //     root=s.pop();
        //     post.addFirst(root.val);
        //     if(root.left!=null){
        //         s.push(root.left);
        //     }
        //     if(root.right!=null){
        //         s.push(root.right);
        //     }
        // } 

      while(root!=null || !s.isEmpty()){
          if(root!=null){
              s.push(root);
              root=root.left;
          }
          else{
              TreeNode temp=s.peek().right;
              if(temp==null){
                  temp=s.pop();
                  post.add(temp.val);
                  while(!s.isEmpty() && temp==s.peek().right){
                      temp=s.pop();
                      post.add(temp.val);
                  }
              }
              else{
                  root=temp;
              }
          }
      }


        return post;
    }
    // public void helper(TreeNode root,List<Integer> post){
    //     if(root==null) return;
    //     helper(root.left,post);
    //     helper(root.right,post);
    //     post.add(root.val);
    // }
}
