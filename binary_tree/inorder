/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    // public List<Integer> inorderTraversal(TreeNode root) {
    //     List<Integer> inorder=new ArrayList<Integer>();
    //     // helper(inorder,root);
    //     // return inorder;  
    //     Stack<TreeNode> s=new Stack<TreeNode>();
    //     while(true){
    //         if(root!=null){
    //             s.push(root);
    //             root=root.left;
    //         }
    //         else{
    //             if(s.isEmpty()) break;
    //             TreeNode k=s.peek();
    //             inorder.add(k.val);
    //             s.pop();
    //             root=k.right;

    //         }

    //     }
    //     return inorder;
    // }
    // // public void helper(List<Integer> inorder,TreeNode root){
    // //     if(root==null) return;
    // //     helper(inorder,root.left);
    // //     inorder.add(root.val);
    //     helper(inorder,root.right);
    // }
    public List<Integer> inorderTraversal(TreeNode root) {
    List<Integer> list = new ArrayList<Integer>();

    Stack<TreeNode> stack = new Stack<TreeNode>();
    TreeNode cur = root;

    while(cur!=null || !stack.empty()){
        while(cur!=null){
            stack.add(cur);
            cur = cur.left;
        }
        cur = stack.pop();
        list.add(cur.val);
        cur = cur.right;
    }

    return list;
}
}
