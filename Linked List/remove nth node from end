without dummy optimal

class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        if(head==null) return null;
        ListNode slow=head,fast=head;
        for(int i=0;i<n;i++){
            fast=fast.next;
        }
        if(fast==null)    //this means remove Head because n is head
        {
            return head.next;
        }
        while(fast.next!=null){   //reach previous node of nth node
            fast=fast.next;
            slow=slow.next;
        }
        slow.next=slow.next.next;
        return head;
    }
}

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        ListNode dummy=new ListNode(0);
        ListNode slow=dummy,fast=dummy;
        
        dummy.next=head;
        for(int i=1;i<=n;i++){
            fast=fast.next;
        }
        while(fast.next!=null){
            slow=slow.next;
            fast=fast.next;
        }
        slow.next=slow.next.next;
        return dummy.next;
    }
}

recursion

class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        if(head==null) return null;
        ListNode dummyNode=new ListNode(-1);
        ListNode temp=dummyNode;
        dummyNode.next=head;
        removeNode(temp,n);
        return dummyNode.next;
    }
    public int removeNode(ListNode head,int n){
        if(head==null) return 1;
        int count=removeNode(head.next,n);
        if(count==n+1){
            head.next=head.next.next;
        } 
        return count+1;
    }
}
