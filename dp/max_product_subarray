class Solution {
    public int maxProduct(int[] nums) {
        int prefix=1,suffix=1;
        int n=nums.length;
        int max=Integer.MIN_VALUE;
        for(int i=0;i<nums.length;i++){
            prefix=prefix*nums[i];
            suffix=suffix*nums[n-i-1];
            max=Math.max(max,Math.max(prefix,suffix));
                        if(prefix==0){
                prefix=1;
            }
            if(suffix==0){
                suffix=1;
            }
        }
        return max;
    }
}

kadane

class Solution {
    public int maxProduct(int[] nums) {
        int n=nums.length;
        int max=nums[0];
        int min=nums[0];
        int ans=nums[0];
        for(int i=1;i<n;i++){
            if(nums[i]<0){
                int temp=max;
                max=min;
                min=temp;
            }
            max=Math.max(nums[i],max*nums[i]);
            min=Math.min(nums[i],min*nums[i]);
            ans=Math.max(ans,max);
        }
        return ans;
    }
}
