memoize


class Solution{
    static int palindromicPartition(String str)
    {
        // code here
        int dp[]=new int[str.length()];
        Arrays.fill(dp,-1);
        return f(0,str,dp)-1;
    }
    static int f(int index,String s,int[]dp){
        if(index==s.length()){
            return 0;
        }
        if(dp[index]!=-1) return dp[index];
        int ans=Integer.MAX_VALUE;
        for(int k=index;k<s.length();k++){
            if(isPalindrome(s.substring(index,k+1))){
                int steps=1+f(k+1,s,dp);
                if(steps<ans){
                    ans=steps;
                }
            }
        }
        return dp[index]=ans;
    }
    static boolean isPalindrome(String s){
        int i=0;
        int j=s.length()-1;
        while(i<j){
            if(s.charAt(i)==s.charAt(j)){
                i++;
                j--;
            }
            else{
                return false;
            }
        }
        return true;
    }
}

tab

class Solution{
    static int palindromicPartition(String str)
    {
        // code here
        int dp[]=new int[str.length()+1];
        dp[str.length()]=0;
        for(int i=str.length()-1;i>=0;i--){
             int ans=Integer.MAX_VALUE;
        for(int k=i;k<str.length();k++){
            if(isPalindrome(str.substring(i,k+1))){
                int steps=1+dp[k+1];
                if(steps<ans){
                    ans=steps;
                }
            }
        }
             dp[i]=ans;
        }
        return dp[0]-1;
    }
    static boolean isPalindrome(String s){
        int i=0;
        int j=s.length()-1;
        while(i<j){
            if(s.charAt(i)==s.charAt(j)){
                i++;
                j--;
            }
            else{
                return false;
            }
        }
        return true;
    }
}
