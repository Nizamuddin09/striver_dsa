recursion

  class Solution {
    public int minPathSum(int[][] grid) {
        int n=grid.length;
        int m=grid[0].length;
        int dp[][]=new int[n][m];
        for(int[] rows:dp){
            Arrays.fill(rows,-1);
        }
        return f(n-1,m-1,grid,dp);
    }
    public int f(int i,int j,int[][] grid,int[][]dp){
        if(i==0 && j==0){
            return grid[i][j];
        }
        if(i<0 || j<0){
            return (int)1e9;
        }
        
        if(dp[i][j]!=-1) return dp[i][j];

        int up=grid[i][j]+f(i-1,j,grid,dp);
        int left=grid[i][j]+f(i,j-1,grid,dp);
        return dp[i][j]=Math.min(up,left);
    }
}

tab

  class Solution {
    public int minPathSum(int[][] grid) {
        int n=grid.length;
        int m=grid[0].length;
        int dp[][]=new int[n][m];
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(i==0 && j==0){
                    dp[i][j]=grid[i][j];
                }
                else{
                    int up=grid[i][j];
                    int left=grid[i][j];
                    if(i>0) up+=dp[i-1][j];
                    else up+=(int)1e9;
                    
                    if(j>0) left+=dp[i][j-1];
                    else left+=(int)1e9;

                    dp[i][j]=Math.min(up,left);

                }
            }
        }
        return dp[n-1][m-1];
    }
}

space

  class Solution {
    public int minPathSum(int[][] grid) {
        int n=grid.length;
        int m=grid[0].length;
        int prev[]=new int[m];
        int cur[]=new int[m];
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(i==0 && j==0){
                    cur[j]=grid[i][j];
                }
                else{
                    int up=grid[i][j];
                    int left=grid[i][j];
                    if(i>0) up+=prev[j];
                    else up+=(int)1e9;
                    
                    if(j>0) left+=cur[j-1];
                    else left+=(int)1e9;

                    cur[j]=Math.min(up,left);

                }
                prev=(int[])cur.clone();
            }
        }
        return prev[m-1];
    }
}
