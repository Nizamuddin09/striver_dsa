recursion

class Solution {
    public int minDistance(String word1, String word2) {
        int n=word1.length();
        int m=word2.length();
        int dp[][]=new int[n][m];
        for(int[]rows:dp){
            Arrays.fill(rows,-1);
        }
        return recur(n-1,m-1,word1,word2,dp);
    }
    public int recur(int i,int j,String s1,String s2,int[][]dp){
        if(i<0) return j+1;
        if(j<0) return i+1;
        if(dp[i][j]!=-1)return dp[i][j];
        if(s1.charAt(i)==s2.charAt(j)){
            return dp[i][j]=recur(i-1,j-1,s1,s2,dp);
        }
        return dp[i][j]=1+Math.min(recur(i-1,j,s1,s2,dp),Math.min(recur(i,j-1,s1,s2,dp),recur(i-1,j-1,s1,s2,dp)));
    }
}

tabulation 
class Solution {
    public int minDistance(String word1, String word2) {
        int n=word1.length();
        int m=word2.length();
        int dp[][]=new int[n+1][m+1];
        for(int i=0;i<=n;i++) dp[i][0]=i;
        for(int j=0;j<=m;j++) dp[0][j]=j;
        for(int i=1;i<=n;i++){
            for(int j=1;j<=m;j++){
                if(word1.charAt(i-1)==word2.charAt(j-1)){
                    dp[i][j]=dp[i-1][j-1];
                }
                else{ 
            
            dp[i][j]=1+Math.min(dp[i-1][j],Math.min(dp[i][j-1],dp[i-1][j-1]));
            
                }
            }
        }
        return dp[n][m];
    }
}

space optimized tabulation

class Solution {
    public int minDistance(String word1, String word2) {
        int n=word1.length();
        int m=word2.length();
        int prev[]=new int[m+1];
        int cur[]=new int[m+1];
        for(int j=0;j<=m;j++) prev[j]=j;
        for(int i=1;i<=n;i++){
            cur[0]=i;
            for(int j=1;j<=m;j++){
                if(word1.charAt(i-1)==word2.charAt(j-1)){
                    cur[j]=prev[j-1];
                }
                else{ 
            
            cur[j]=1+Math.min(prev[j],Math.min(cur[j-1],prev[j-1]));
            
                }
            }
            prev=(int[])cur.clone();
        }
        return prev[m];
    }
}
