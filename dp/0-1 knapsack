memoization recur bottom up

class Solution 
{ 
    //Function to return max value that can be put in knapsack of capacity W.
    static int knapSack(int W, int wt[], int val[], int n) 
    { 
         // your code here 
         int[][]dp=new int[n][W+1];
         for(int[] rows:dp){
             Arrays.fill(rows,-1);
         }
         int ans=recur(n-1,W,wt,val,dp);
         return ans;
    } 
    public static int recur(int index,int w,int []wt,int[] val,int[][]dp){
        if(index==0){
            if(wt[0]<=w){
                return val[0];
            }
            else{
                return 0;
            }
        }
        if(dp[index][w]!=-1){
            return dp[index][w];
        }
        int notTake=0+recur(index-1,w,wt,val,dp);
        int take=Integer.MIN_VALUE;
        if(wt[index]<=w){
            take=val[index]+recur(index-1,w-wt[index],wt,val,dp);
        }
        return dp[index][w]=Math.max(take,notTake);
    }
}

tabulation
forward direction

class Solution 
{ 
    //Function to return max value that can be put in knapsack of capacity W.
    static int knapSack(int W, int wt[], int val[], int n) 
    { 
         // your code here 
         int[][]dp=new int[n][W+1];
         for(int i=wt[0];i<=W;i++){
             dp[0][i]=val[0];
         }
         for(int i=1;i<n;i++){
            for(int w=0;w<=W;w++){
                 
                int notTake=dp[i-1][w];
                int take=Integer.MIN_VALUE;
                
                if(wt[i]<=w){
                    take=val[i]+dp[i-1][w-wt[i]];
                }
                
                dp[i][w]=Math.max(take,notTake);
            
                
            }
         }
         return dp[n-1][W];
    } 
}


tabulation space optimization 2 arrays


class Solution 
{ 
    //Function to return max value that can be put in knapsack of capacity W.
    static int knapSack(int W, int wt[], int val[], int n) 
    { 
         // your code here 
         int prev[]=new int[W+1];
         int cur[]=new int[W+1];
         for(int i=wt[0];i<=W;i++){
             prev[i]=val[0];
         }
         for(int i=1;i<n;i++){
            for(int w=0;w<=W;w++){
                 
                int notTake=prev[w];
                int take=Integer.MIN_VALUE;
                
                if(wt[i]<=w){
                    take=val[i]+prev[w-wt[i]];
                }
                
                cur[w]=Math.max(take,notTake);
            
                
            }
            prev=(int[])cur.clone();
         }
         return prev[W];
    } 
}

space optimization one array reverse direction fill of rows
as the values depend on previous rows leftward values only,hence one array is enough for calculations

class Solution 
{ 
    //Function to return max value that can be put in knapsack of capacity W.
    static int knapSack(int W, int wt[], int val[], int n) 
    { 
         // your code here 
         int prev[]=new int[W+1];
         for(int i=wt[0];i<=W;i++){
             prev[i]=val[0];
         }
         for(int i=1;i<n;i++){
            for(int w=W;w>=0;w--){
                 
                int notTake=prev[w];
                int take=Integer.MIN_VALUE;
                
                if(wt[i]<=w){
                    take=val[i]+prev[w-wt[i]];
                }
                
                prev[w]=Math.max(take,notTake);
            
                
            }
         }
         return prev[W];
    } 
}




