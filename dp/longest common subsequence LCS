recursive

class Solution {
    public int longestCommonSubsequence(String text1, String text2) {
        return lcs(text1,text2,text1.length()-1,text2.length()-1);
    }
    public int lcs(String text1, String text2,int ind1,int ind2){
        if(ind1 < 0 || ind2 < 0){
            return 0;
        }
        int take=Integer.MIN_VALUE;
        if(text1.charAt(ind1)==text2.charAt(ind2)){
            take=1+lcs(text1,text2,ind1-1,ind2-1);
        }
        int notTake=Math.max(lcs(text1,text2,ind1-1,ind2),lcs(text1,text2,ind1,ind2-1));
        return Math.max(take,notTake);
    }
}



memoization top down recursion

class Solution {
    public int longestCommonSubsequence(String text1, String text2) {
        int [][]dp=new int[text1.length()][text2.length()];
        for(int[]rows:dp){
            Arrays.fill(rows,-1);
        }
        int m=lcs(text1.length()-1,text2.length()-1,text1,text2,dp);
        return m;
    }
    public int lcs(int index1,int index2,String s1,String s2,int[][]dp){
        if(index1<0 || index2<0){
            return 0;
        }
        if(dp[index1][index2]!=-1){
            return dp[index1][index2];
        }
        if(s1.charAt(index1)==s2.charAt(index2)){
            return dp[index1][index2]=1+lcs(index1-1,index2-1,s1,s2,dp);
        }
        return dp[index1][index2]=Math.max(lcs(index1-1,index2,s1,s2,dp),lcs(index1,index2-1,s1,s2,dp));
    }
}

tabulation bottom up

class Solution {
    public int longestCommonSubsequence(String text1, String text2) {
        int n=text1.length();
        int m=text2.length();
        int dp[][]=new int[n+1][m+1];
        for(int i=0;i<n;i++){
            dp[i][0]=0;
        }
        for(int i=0;i<m;i++){
            dp[0][i]=0;
        }
        for(int i=1;i<=n;i++){
            for(int j=1;j<=m;j++){
               if(text1.charAt(i-1)==text2.charAt(j-1)){
                   dp[i][j]=1+dp[i-1][j-1];
               }
               else{
                   dp[i][j]=Math.max(dp[i-1][j],dp[i][j-1]);
               }
            }
        }
        return dp[n][m];
    }
}

space optimize tabulation

class Solution {
    public int longestCommonSubsequence(String text1, String text2) {
        int n=text1.length();
        int m=text2.length();
        int prev[]=new int[m+1];
        int cur[]=new int[m+1];
        for(int i=1;i<=n;i++){
            for(int j=1;j<=m;j++){
               if(text1.charAt(i-1)==text2.charAt(j-1)){
                   cur[j]=1+prev[j-1];
               }
               else{
                   cur[j]=Math.max(prev[j],cur[j-1]);
               }
            }
             prev=(int[])(cur.clone());
        }
        return prev[m];
    }
}


printing lcs

  int len = L[m][n];

      char lcs[]=new char[len];
      int index=len-1;
        int i = m;
        int j = n;
        while (i > 0 && j > 0) {
            // If current character in X[] and Y are same,
            // then current character is part of LCS
            if (X.charAt(i - 1) == Y.charAt(j - 1)) {
                // Put current character in result
                lcs[index] = X.charAt(i - 1);
 
                // reduce values of i, j and index
                i--;
                j--;
                index--;
            }
 
            // If not same, then find the larger of two and
            // go in the direction of larger value
            else if (L[i - 1][j] > L[i][j - 1])
                i--;
            else
                j--;
        }
 
        // Print the lcs
        System.out.print("LCS of " + X + " and " + Y
                         + " is ");
        for (int k = 0; k < len; k++)
            System.out.print(lcs[k]);
