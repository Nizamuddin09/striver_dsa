import java.util.* ;
import java.io.*; 

class Solution {
  Node root;
  Solution(){
    root=new Node();
  }
  public void insert(String word){
    Node node=root;
    for(int i=0;i<word.length();i++){
      if(!node.containsKey(word.charAt(i))){
        node.put(word.charAt(i),new Node());
      }
      node=node.getNode(word.charAt(i));
    }
    node.setFlag();
  }
  public boolean isComplete(String word){
    Node node=root;
    for(int i=0;i<word.length();i++){
      node=node.getNode(word.charAt(i));
      if(!node.getEnd()){
        return false;
      }
    }
    return true;
  }

  public static String completeString(int n, String[] a) {
    // Write your code here.
    Solution obj=new Solution();
    for(int i=0;i<n;i++){
      obj.insert(a[i]);
    }
    String ans="";
    for(int i=0;i<n;i++){
      if(obj.isComplete(a[i])){
        if(ans.length()<a[i].length()){
          ans=a[i];
        }
        else if(ans.length()==a[i].length()){ 
          if(ans.compareToIgnoreCase(a[i])>0){
            ans=a[i];
          }
        }
      }
    }
    return ans==""?"None":ans;

  }
}
class Node{
  Node[] links=new Node[26];
  boolean flag=false;
  
  public boolean containsKey(char ch){
    return links[ch-'a']!=null;
  }
  public Node getNode(char ch){
    return links[ch-'a'];
  }
  public void put(char ch,Node node){
    links[ch-'a']=node;
  }
  public boolean setFlag(){
    flag=true;
    return flag;
  }
  public boolean getEnd(){
    return flag;
  }
}
