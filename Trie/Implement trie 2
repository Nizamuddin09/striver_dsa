import java.util.* ;
import java.io.*; 

class Node{
    Node links[]=new Node[26];
    int countEnd;
    int countPrefix;

    public boolean containsKey(char ch){
        return links[ch-'a']!=null;
    }
    public Node getNode(char ch){
        return links[ch-'a'];
    }
    public void put(char ch,Node node){
        links[ch-'a']=node;
    }
    public void increaseCountEnd(){
        countEnd++;
    }
    public void increaseCountPrefix(){
        countPrefix++;
    }
    public void decreaseCountEnd(){
        countEnd--;
    }
    public void decreaseCountPrefix(){
        countPrefix--;
    }
    public int getCountEnd(){
        return countEnd;
    }
    public int getCountPrefix(){
        return countPrefix;
    }
}

public class Trie {
    Node root;
    public Trie() {
        // Write your code here.
        root=new Node();
    }

    public void insert(String word) {
        // Write your code here.
        Node node=root;
        for(int i=0;i<word.length();i++){
            if(!node.containsKey(word.charAt(i))){
                node.put(word.charAt(i),new Node());
            }
            node=node.getNode(word.charAt(i));
            node.increaseCountPrefix();
        }
        node.increaseCountEnd();
    }

    public int countWordsEqualTo(String word) {
        // Write your code here.
        Node node=root;
        for(int i=0;i<word.length();i++){
            if(!node.containsKey(word.charAt(i))){
                return 0;
            }
            node=node.getNode(word.charAt(i));
        }
        return node.getCountEnd();
    }

    public int countWordsStartingWith(String word) {
        // Write your code here.
        Node node=root;
        for(int i=0;i<word.length();i++){
            if(!node.containsKey(word.charAt(i))){
                return 0;
            }
            node=node.getNode(word.charAt(i));
        }
        return node.getCountPrefix();
    }

    public void erase(String word) {
        // Write your code here.
        Node node=root;
        for(int i=0;i<word.length();i++){
            node=node.getNode(word.charAt(i));
            node.decreaseCountPrefix();
        }
        node.decreaseCountEnd();
    }

}

