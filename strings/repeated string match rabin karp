brute

class Solution {
    public int repeatedStringMatch(String a, String b) {
        StringBuilder s=new StringBuilder();
        int count=0;
        while(s.length()<b.length()){
            s.append(a);
            count++;
        }
        if(s.toString().contains(b)) return count;
        if(s.append(a).toString().contains(b)) return ++count;
        return -1;
        
    }
}

best - rabin karp

class Solution {
    private final int mod = 101;
    public int repeatedStringMatch(String a, String b) {
        StringBuilder s=new StringBuilder();
        int count=0;
        while(s.length()<b.length()){
            s.append(a);
            count++;
        }
        if(rabinKarp(s.toString(),b)) return count;
        if(rabinKarp(s.append(a).toString(),b)) return ++count;
        return -1;
        
    }
    public boolean rabinKarp(String text, String pattern){
        int m=pattern.length();
        int n=text.length();
        int d=256;
        int h=1;
        int p=0;
        int t=0;
        for(int i=0;i<m-1;i++){
            h=(h*d)%mod;
        }
        for(int i=0;i<m;i++){
            p=(p*d+pattern.charAt(i))%mod;
            t=(t*d+text.charAt(i))%mod;
        }
        for(int i=0;i<n-m+1;i++){
            if(t==p){
                boolean match=true;
                for(int j=0;j<m;j++){
                    if(text.charAt(i+j)!=pattern.charAt(j)){
                        match=false;
                        break;
                    }
                }
                if(match){
                    return true;
                }
            }
            if(i<(n-m)){
                t=(d*(t-text.charAt(i)*h)+text.charAt(i+m))%mod;
                if(t<0){
                    t=t+mod;
                }
            }


        }
        return false;
    }
}
