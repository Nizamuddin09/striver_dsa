class Solution {
    public int strStr(String haystack, String needle) {
        return kmp(haystack,needle);
    }
    public int kmp(String text,String pattern){
        int n=text.length();
        int m=pattern.length();
        int lps[]=new int[m];
        computeLps(lps,pattern,m);
        int i=0;
        int j=0;
        while(i<n && j<m){
            if(text.charAt(i)==pattern.charAt(j)){
                i++;
                j++;
                if(j==m){
                    return i-m;
                    //j=lps[j-1];
                }
            }
            else if(i<n){
                if(j!=0){
                    j=lps[j-1];
                }
                else{
                    i++;
                }
            }
        }
        return -1;
    }
    public void computeLps(int[] lps,String pattern, int m){
        lps[0]=0;
        int j=0;
        int i=1;
        while(i<m){
            if(pattern.charAt(i)==pattern.charAt(j)){
                lps[i]=j+1;
                i++;
                j++;
            }
            else{
                if(j!=0){
                    j=lps[j-1];
                }
                else{
                    lps[i]=0;
                    i++;
                }
            }
        }
    }
}
