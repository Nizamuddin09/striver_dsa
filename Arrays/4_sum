generic k sum
two sum two pointer can be replaced by two sum hashset and skipping duplicate values
class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
        Arrays.sort(nums);
        return genericSum(nums, 0, target, 4);
    }

    public List<List<Integer>> genericSum(int[] nums, int start, long target, int k) {
                List<List<Integer>> ans = new ArrayList<>();
                long average_value = target / k;

        // We cannot obtain a sum of target if the smallest value
        // in nums is greater than target / k or if the largest
        // value in nums is smaller than target / k.
        if (
            nums[start] > average_value || average_value > nums[nums.length - 1]
        ) {
            return ans;
        }
        if (k == 2) {
            return twoSum(nums, target, start);
        }
        for (int i = start; i < nums.length-k+1; ++i) {
            if (i == start || nums[i-1] != nums[i]) {
                for (List<Integer> subset : genericSum(nums, i + 1, target - nums[i], k - 1)) {
                    ans.add(new ArrayList<>(subset));
                    ans.get(ans.size() - 1).add(nums[i]);
                }
            }
        }
        return ans;
    }
        public List<List<Integer>> twoSum(int[] nums, long target, int start) {
        List<List<Integer>> res = new ArrayList<>();
        int lo = start, hi = nums.length - 1;

        while (lo < hi) {
            int currSum = nums[lo] + nums[hi];
            if (currSum < target || (lo > start && nums[lo] == nums[lo - 1])) {
                ++lo;
            } else if (
                currSum > target ||
                (hi < nums.length - 1 && nums[hi] == nums[hi + 1])
            ) {
                --hi;
            } else {
                res.add(Arrays.asList(nums[lo++], nums[hi--]));
            }
        }

        return res;
    }
}


more intuitive optimal

class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
        int n=nums.length;
        Arrays.sort(nums);
        List<List<Integer>> ans = new ArrayList<>();
        for(int i=0;i<n-4+1;i++){
            if(i>00 && nums[i]==nums[i-1]) continue;
            for(int j=i+1;j<n-3+1;j++){
                if(j>i+1 && nums[j]==nums[j-1]) continue;
                int k=j+1;
                int l=n-1;
                while(k<l){
                    int sum=nums[i]+nums[j]+nums[k]+nums[l];
                    if(sum>target){
                        l--;
                    }
                    else if(sum<target){
                        k++;
                    }
                    else{
                        List<Integer> temp=Arrays.asList(nums[i],nums[j],nums[k],nums[l]);
                        ans.add(temp);
                        k++;
                        l--;
                        while(k<l && nums[k]==nums[k-1]) continue;
                        while(k<l && nums[l]==nums[l+1]) continue;
                    }
                }
            }
        }
        return ans;
    }
}

class Solution {

optimal two pointer 

    public List<List<Integer>> fourSum(int[] nums, int target) {
        List<List<Integer>> ans=new ArrayList<List<Integer>>();
        int n=nums.length;
        Arrays.sort(nums);
        
        for(int i=0;i<n;i++){
            for(int j=i+1;j<n;j++){
                int target2=target-nums[i]-nums[j];
                int low=j+1;int high=n-1;
                while(low<high){
                  
                    if(nums[low]+nums[high]==target2){
                           List<Integer> res=new ArrayList<>();
                         res.add(nums[i]);
                         res.add(nums[j]);
                         res.add(nums[low]);
                         res.add(nums[high]);
                        ans.add(res);
                        
                    while(low<high && nums[low]==res.get(2)){
                        ++low;
                    }
                    while(low<high && nums[high]==res.get(3)){
                        --high;
                    }
                        
                    }
                    else if(nums[low]+nums[high] > target2){
                        high--;
                    }
                    else {
                        low++;
                    }
                    
                    
                }
                
                while( j+1<n && nums[j+1]==nums[j]) ++j;
            }
            while(i+1<n && nums[i+1]==nums[i]) ++i;
        }
        
        return ans;
        
        
       brute force binary search 
        
//         Arrays.sort(nums);
//         HashSet<List<Integer>> s=new HashSet<List<Integer>>();
//          for(int i=0;i<nums.length;i++){
//              for(int j=i+1;j<nums.length;j++){
//                  for(int k=j+1;k<nums.length;k++){
//                      int target2 = target-nums[i]-nums[j]-nums[k];
//                      int low=k+1;int high=nums.length-1;
                     
//                      List<Integer> res=new ArrayList<Integer>();
                     
//                      while(low<high){
//                         int mid=low+(high-low)/2;
//                          if(nums[mid]==target2){
//                              res.add(nums[i]);
//                              res.add(nums[j]);
//                              res.add(nums[k]);
//                              res.add(nums[mid]);
//                              s.add(res);
//                          }
//                          else if(nums[mid]>target2){
//                              high=mid-1;
//                          }
//                          else{
//                              low=mid+1;
//                          }
//                      }
//                  }
                 
//              }
//          }
        
//         List<List<Integer>> ans=new ArrayList<List<Integer>>(s);
        
//         return ans;
    }
}
