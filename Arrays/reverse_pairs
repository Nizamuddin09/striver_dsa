intuitive 
class Solution {
    public int reversePairs(int[] nums) {
        int n=nums.length;
        int count=mergeSort(0,n-1,nums);
        return count;
    }
        public static int mergeSort(int low,int high,int arr[]){
        int invCount=0;
        if(low<high){
        int mid=low+(high-low)/2;
        invCount=mergeSort(low, mid, arr);
        invCount+=mergeSort(mid+1, high, arr);
        invCount+=countPairs(low,mid,high,arr);
        merge(low,mid,high,arr);
        }
        return invCount;
    }
    public static int countPairs(int low, int mid, int high,int[] arr){
        int right=mid+1;
        int count=0;
        for(int i=low;i<=mid;i++){
            while(right<=high && arr[i]/2.0>arr[right]){
                right++;
            }
            count+=right-(mid+1);
        }
        return count;
    }
    public static void merge(int low, int mid, int high, int arr[]){
        int i=low,j=mid+1,k=0; 
        int temp[]=new int[high-low+1];
        while(i<=mid && j<=high){
            if(arr[i]<arr[j]){
                temp[k++]=arr[i++];
            }else{
                temp[k++]=arr[j++];
            }
        }
        while(i<=mid){
            temp[k++]=arr[i++];
        }
        while(j<=high){
            temp[k++]=arr[j++];
        }
        for(i=low,k=0;i<=high;i++,k++){
            arr[i]=temp[k];
        }
    }
}

class Solution {
    public int reversePairs(int[] nums) {
        return mergeSort(nums,nums.length);
    }
    public int mergeSort(int nums[],int n){
        if(n<2) return 0;
        int mid=n/2;
        int left[]=new int[mid];
        int right[]=new int[n-mid];
        for(int i=0;i<mid;i++){
            left[i]=nums[i];
        }
        for(int j=mid;j<n;j++){
           right[j-mid]=nums[j];   
        }
        int inv=mergeSort(left,left.length);
        inv+=mergeSort(right,right.length);
        inv+=merge(nums,left,right);
        return inv;
    }
    public int merge(int arr[],int left[],int right[]){
            int n=arr.length;
    int l=left.length;
    int r=right.length;
       int cnt=0; 
     for(int i=0,j=0;i<l && j<r;){
         if((left[i]/2.0)>right[j]){
             cnt+= l-i;
             j++;
         }
         else{
             i++;
         }
     }   
        
        
    int k=0,i=0,j=0;
        
    while(i < l && j < r){
    if(left[i]<=right[j]){
    arr[k++]=left[i++];
    }
    else{
    arr[k++]=right[j++];
    }
    }
    while(i<l){
    arr[k++]=left[i++];
    }
    
    while(j<r){
    arr[k++]=right[j++];
    }
     return cnt;   
    }
}
