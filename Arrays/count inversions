import java.util.* ;
import java.io.*; 
public class Solution {
    public static long count=0;
    public static long getInversions(long arr[], int n) {
        // Write your code here.
        long count=mergeSort(0,n-1,arr);
        return count;
    }
    public static long mergeSort(int low,int high,long arr[]){
        long invCount=0;
        if(low<high){
        int mid=low+(high-low)/2;
        invCount=mergeSort(low, mid, arr);
        invCount+=mergeSort(mid+1, high, arr);
        invCount+=merge(low,mid,high,arr);
        }
        return invCount;
    }
    public static long merge(int low, int mid, int high, long arr[]){
        long invCount=0;
        int i=low,j=mid+1,k=0;
        long temp[]=new long[high-low+1];
        while(i<=mid && j<=high){
            if(arr[i]<=arr[j]){
                temp[k++]=arr[i++];
            }else{
                invCount+=mid-i+1;
                temp[k++]=arr[j++];
            }
        }
        while(i<=mid){
            temp[k++]=arr[i++];
        }
        while(j<=high){
            temp[k++]=arr[j++];
        }
        for(i=low,k=0;i<=high;i++,k++){
            arr[i]=temp[k];
        }
        return invCount;
    }

}
