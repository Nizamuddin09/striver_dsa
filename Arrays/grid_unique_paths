intuitive

recursion/memoization
class Solution {
    public int uniquePaths(int m, int n) {
        int dp[][]=new int[m][n];
        for(int [] row:dp){
            Arrays.fill(row,-1);
        }
        return helper(0,0,m,n,dp);
    }
    public int helper(int i,int j,int m,int n,int dp[][]){
        if(i>=m || j>=n){
            return 0;
        }
        if(dp[i][j]!=-1){
            return dp[i][j];
        }
        if(i==m-1 && j==n-1){
            return dp[i][j]=1;
        }
        return dp[i][j]=helper(i+1,j,m,n,dp)+helper(i,j+1,m,n,dp);
    }
}

tabulation
class Solution {
    public int uniquePaths(int m, int n) {
        int dp[][]=new int[m][n];
        for(int i=0;i<m;i++){
            dp[i][0]=1;
        }
        for(int i=0;i<n;i++){
            dp[0][i]=1;
        }
        for(int i=1;i<m;i++){
            for(int j=1;j<n;j++){
                dp[i][j]=dp[i-1][j]+dp[i][j-1];
            }
        }
        return dp[m-1][n-1];
    }
}

less space
class Solution {
    public int uniquePaths(int m, int n) {
        int []prev=new int[n];
        int []cur=new int[n];
        for(int i=0;i<n;i++){
            cur[i]=1;
            prev[i]=1;
        }
        for(int i=1;i<m;i++){
            for(int j=1;j<n;j++){
                cur[j]=prev[j]+cur[j-1];
            }
            prev=cur;
        }
        return cur[n-1];
    }
}

least space
class Solution {
    public int uniquePaths(int m, int n) {
        int []cur=new int[n];
        for(int i=0;i<n;i++){
            cur[i]=1;
        }
        for(int i=1;i<m;i++){
            for(int j=1;j<n;j++){
                cur[j]=cur[j]+cur[j-1];
            }
        }
        return cur[n-1];
    }
}

class Solution {
    public int uniquePaths(int m, int n) {
//     return helper(m,n,0,0,new int[m][n]);
//     }

        recursion and memoization
//     public int helper(int m,int n,int i,int j,int [][]memo){
//         if(i==m || j==n) return 0;
//         if(i==m-1 && j==n-1) return 1;
//         if(memo[i][j]!=0) return memo[i][j];
        
//         memo[i][j]=helper(m,n,i+1,j,memo)+helper(m,n,i,j+1,memo);
//         return memo[i][j];
        DP tabulation
      //   if(m==0 || n==0) return 0;
      // int dp[][]=new int[m][n];
      //   for(int i=0;i<n;i++){
      //       dp[0][i]=1;
      //   }
      //   for(int i=0;i<m;i++){
      //       dp[i][0]=1;
      //   }
      //   for(int i=1;i<m;i++){
      //       for(int j=1;j<n;j++){
      //           dp[i][j]=dp[i-1][j]+dp[i][j-1];
      //       }
      //   }
      //   return dp[m-1][n-1];
        O(n+n) space
        // int prev[]=new int[n];
        // int cur[]=new int[n];
        // for(int i=0;i<n;i++){
        //     cur[i]=1;
        //     prev[i]=1;
        // }
        // for(int i=1;i<m;i++){
        //     for(int j=1;j<n;j++){
        //    cur[j]=cur[j-1]+prev[j];
        //     }
        //     prev=cur;
        // }
        // return cur[n-1];
        
        O(n) space
        
        //         int cur[]=new int[n];
        // for(int i=0;i<n;i++){
        //     cur[i]=1;
        // }
        // for(int i=1;i<m;i++){
        //     for(int j=1;j<n;j++){
        //    cur[j]=cur[j-1]+cur[j];
        //     }
        // }
        // return cur[n-1];
        
        combinatorics
        
        int N = m+n-2;
        int r=m-1;
        double res=1.0;
        for(int i=1;i<=r;i++){
            res = res * (N-r+i)/i ; 
        }
        return (int) res;
    }
}
