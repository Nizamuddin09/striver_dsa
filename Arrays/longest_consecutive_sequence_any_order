better similar to kadane
class Solution {
    public int longestConsecutive(int[] a) {
              int n = a.length;
        if (n == 0) return 0;

        //sort the array:
        Arrays.sort(a);
        int lastSmaller = Integer.MAX_VALUE;
        int cnt = 0;
        int longest = 1;

        //find longest sequence:
        for (int i = 0; i < n; i++) {
            if (a[i] - 1 == lastSmaller) {
                //a[i] is the next element of the
                //current sequence.
                cnt += 1;
                lastSmaller = a[i];
            } else if (a[i] != lastSmaller) {
                cnt = 1;
                lastSmaller = a[i];
            }
            longest = Math.max(longest, cnt);
        }
        return longest;
    }
}

optimal intuitive
class Solution {
    public int longestConsecutive(int[] nums) {
        int n=nums.length;
        if(n==0) return 0;
        int ans=1;
        HashSet<Integer> set=new HashSet<>();
        for(int i=0;i<n;i++){
            set.add(nums[i]);
        }
        for(Integer val:set){
            if(!set.contains(val-1)){
                int cnt=1;
                while(set.contains(val+1)){
                    cnt++;
                    val=val+1;
                }
                ans=Math.max(ans,cnt);
            }
        }
        return ans;
    }
}

class Solution {
    public int longestConsecutive(int[] nums) {
         if(nums==null || nums.length==0){
             return 0;
         }
         Brute
        // Arrays.sort(nums);
        // int longestStreak=1;
        // int currStreak=1;
        // for(int i=1;i<nums.length;i++){
        //     if(nums[i-1]!=nums[i]){
        //     if(nums[i]==nums[i-1]+1){
        //         currStreak+=1;
        //     }
        //     else{
        //         longestStreak=Math.max(longestStreak,currStreak);
        //         currStreak=1;
        //     }
        //     }
        // }
        // return Math.max(longestStreak,currStreak);
        
        Optimal
           Set<Integer> num_set = new HashSet<Integer>();
        for (int num : nums) {
            num_set.add(num);
        }

        int longestStreak = 0;

        for (int num : num_set) {
            if (!num_set.contains(num-1)) {
                int currentNum = num;
                int currentStreak = 1;

                while (num_set.contains(currentNum+1)) {
                    currentNum += 1;
                    currentStreak += 1;
                }

                longestStreak = Math.max(longestStreak, currentStreak);
            }
        }

        return longestStreak;
        
    }
}
