class Solution {
    public int longestConsecutive(int[] nums) {
         if(nums==null || nums.length==0){
             return 0;
         }
         Brute
        // Arrays.sort(nums);
        // int longestStreak=1;
        // int currStreak=1;
        // for(int i=1;i<nums.length;i++){
        //     if(nums[i-1]!=nums[i]){
        //     if(nums[i]==nums[i-1]+1){
        //         currStreak+=1;
        //     }
        //     else{
        //         longestStreak=Math.max(longestStreak,currStreak);
        //         currStreak=1;
        //     }
        //     }
        // }
        // return Math.max(longestStreak,currStreak);
        
        Optimal
           Set<Integer> num_set = new HashSet<Integer>();
        for (int num : nums) {
            num_set.add(num);
        }

        int longestStreak = 0;

        for (int num : num_set) {
            if (!num_set.contains(num-1)) {
                int currentNum = num;
                int currentStreak = 1;

                while (num_set.contains(currentNum+1)) {
                    currentNum += 1;
                    currentStreak += 1;
                }

                longestStreak = Math.max(longestStreak, currentStreak);
            }
        }

        return longestStreak;
        
    }
}
