class Solution {
    public List<Integer> majorityElement(int[] arr) {
    
    brute force
//                 HashSet < Integer > ans = new HashSet < > ();
                int n=arr.length;
//             for (int i = 0; i < n; i++) {
//               int cnt = 1;
//               for (int j = i + 1; j < n; j++) {
//                 if (arr[j] == arr[i])
//                   cnt++;
//               }

//               if (cnt > (n / 3))
//                 ans.add(arr[i]);
//             }
//          List<Integer> s
//                     = new ArrayList<>(ans);
//             return s;
        
        
        
        
        hashmap frequency
//         HashMap < Integer, Integer > mp = new HashMap < > ();
//     ArrayList < Integer > ans = new ArrayList < > ();

//     for (int i = 0; i < n; i++) {
//       mp.put(arr[i], mp.getOrDefault(arr[i], 0) + 1);
//     }

//     for (int x: mp.keySet()) {
//       if (mp.get(x) > (n / 3))
//         ans.add(x);
//     }

//     return ans;


moore's
            ArrayList < Integer > ans = new ArrayList < > ();
        int ele1=-1;
        int ele2=-1;
        int cnt1=0;
        int cnt2=0;
        
        for(int i=0;i<n;i++){
            if(arr[i]==ele1) cnt1++;
            else if(arr[i]==ele2) cnt2++;
            else if(cnt1 == 0){
                ele1=arr[i];
                cnt1=1;
            }
            else if(cnt2 == 0){
                ele2=arr[i];
                cnt2=1;
            }
            else{
                cnt1--;
                cnt2--;
            }
        }
       cnt1=0;
       cnt2=0; 
        for(int i:arr){
            if(i==ele1){
                cnt1++;
            }
            else if(i==ele2){
                cnt2++;
            }
        }
        if(cnt1>n/3){
            ans.add(ele1);
        }
        
        if(cnt2>n/3){
            ans.add(ele2);
        }
        return ans;
    }
}
