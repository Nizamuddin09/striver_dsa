gfg


class Solution
{
    public boolean isBipartite(int V, ArrayList<ArrayList<Integer>>adj)
    {
        // Code here
        int color[]=new int[V];
        Arrays.fill(color,-1);
        for(int i=0;i<V;i++){
            if(color[i]==-1){
                if(dfs(i,0,color,adj)==false){
                    return false;
                }
            }
        }
        return true;
    }
    public boolean dfs(int node,int col,int color[],ArrayList<ArrayList<Integer>>adj){
        color[node]=col;
        for(int n:adj.get(node)){
            if(color[n]==-1){
                if(dfs(n,1-col,color,adj)==false){
                    return false;
                }
            }
            else if(color[n]==col){
                return false;
            }
        }
        return true;
    }
}

---------------------
leetcode

class Solution {
    public boolean isBipartite(int[][] graph) {
                // Code here
        int V=graph.length;
        int color[]=new int[V];
        Arrays.fill(color,-1);
        for(int i=0;i<V;i++){
            if(color[i]==-1){
                if(dfs(i,0,color,graph)==false){
                    return false;
                }
            }
        }
        return true;
    }
    public boolean dfs(int node,int col,int color[],int[][] graph){
        color[node]=col;
        for(int n:graph[node]){
            if(color[n]==-1){
                if(dfs(n,1-col,color,graph)==false){
                    return false;
                }
            }
            else if(color[n]==col){
                return false;
            }
        }
        return true;
    }
}
