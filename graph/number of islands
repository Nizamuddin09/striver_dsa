bfs, horizontal, vertical , diagonal all 8 directions

class Solution {
    // Function to find the number of islands.
    public int numIslands(char[][] grid) {
        // Code here
        int n=grid.length;
        int m=grid[0].length;
        boolean[][] vis=new boolean[n][m];
        int cnt=0;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(!vis[i][j] && grid[i][j]=='1'){
                    bfs(i,j,vis,grid);
                    cnt++;
                }
            }
        }
        return cnt;
        
    }
    public void bfs(int i,int j,boolean[][] vis,char[][] grid){
        vis[i][j]=true;
        Queue<Pair> q=new LinkedList<>();
        q.add(new Pair(i,j));
        int n=grid.length;
        int m=grid[0].length;
        while(!q.isEmpty()){
            int row=q.peek().first;
            int col=q.peek().second;
            q.poll();
            for(int delRow=-1;delRow<=1;delRow++){
                for(int delCol = -1;delCol<=1;delCol++){
                    int newRow=row+delRow;
                    int newCol=col+delCol;
                    if(newRow>=0 && newRow <n && newCol >=0 && newCol<m){
                        if(!vis[newRow][newCol] && grid[newRow][newCol]=='1'){
                            vis[newRow][newCol]=true;
                            q.add(new Pair(newRow,newCol));
                        }
                    }
                }
            }
        }
    }
}
class Pair{
    int first;
    int second;
    Pair(int first,int second){
        this.first=first;
        this.second=second;
    }
}
