
class Solution {
    public static List<Integer> shortestPath(int n, int m, int edges[][]) {
        // code here
        ArrayList<ArrayList<Pair>> adj = new ArrayList<>(); 
        for(int i=0;i<=n;i++){
            adj.add(new ArrayList<Pair>());
        }
        for(int i=0;i<edges.length;i++){
            for(int j=0;j<edges[i].length;j++){
                adj.get(edges[i][0]).add(new Pair(edges[i][1],edges[i][2]));
                adj.get(edges[i][1]).add(new Pair(edges[i][0],edges[i][2]));
            }
        }
        PriorityQueue<Pair> q=new PriorityQueue<Pair>((x,y)->x.first-y.first);
        int dist[]=new int[n+1];
        Arrays.fill(dist,Integer.MAX_VALUE);
        int parent[]=new int[n+1];
        for(int i=1;i<=n;i++){
            parent[i]=i;
        }
        dist[1]=0;
        q.add(new Pair(0,1));
        while(!q.isEmpty()){
            Pair temp=q.poll();
            int distance=temp.first;
            int node=temp.second;
            for(int i=0;i<adj.get(node).size();i++){
                int weight=adj.get(node).get(i).second;
                int edgeNode = adj.get(node).get(i).first;
                if(distance+weight<dist[edgeNode]){
                    dist[edgeNode]=distance+weight;
                    q.add(new Pair(dist[edgeNode],edgeNode));
                    parent[edgeNode]=node;
                }
            }
        }
        List<Integer> path=new ArrayList<Integer>();
        if(dist[n] == Integer.MAX_VALUE) {
            path.add(-1); 
            return path; 
        }
        int node=n;
        while(parent[node]!=node){
            path.add(node);
            node=parent[node];
        }
        path.add(1);
        Collections.reverse(path);
        return path;
        
        
    }
}
class Pair{
    int first;
    int second;
    public Pair(int first,int second){
        this.first = first;
        this.second = second;
    }
}
