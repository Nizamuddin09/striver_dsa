
class Solution
{
    //Function to find the shortest distance of all the vertices
    //from the source vertex S.
    static int[] dijkstra(int V, ArrayList<ArrayList<ArrayList<Integer>>> adj, int S)
    {
        // Write your code here
        PriorityQueue<Pair> q=new PriorityQueue<Pair>((x,y) -> x.distance-y.distance);
        int dist[]=new int[V];
        Arrays.fill(dist,Integer.MAX_VALUE);
        dist[S]=0;
        q.add(new Pair(0,S));
        while(!q.isEmpty()){
            Pair temp=q.poll();
            int distance=temp.distance;
            int node=temp.node;
            for(int i=0;i<adj.get(node).size();i++){
                int edgeNode = adj.get(node).get(i).get(0);
                int weigth = adj.get(node).get(i).get(1);
                if(distance+weigth < dist[edgeNode]){
                    dist[edgeNode]=distance+weigth;
                    q.add(new Pair(dist[edgeNode],edgeNode));
                }
              
            }
        }
        return dist;
    }
}
class Pair{
    int distance;
    int node;
    Pair(int distance,int node){
        this.distance=distance;
        this.node=node;
    }
}
