
class Solution
{
    //Function to find number of strongly connected components in the graph.
    public int kosaraju(int V, ArrayList<ArrayList<Integer>> adj)
    {
        //code here
        boolean vis[]=new boolean[V];
        Stack<Integer> s=new Stack<>();
        for(int i=0;i<V;i++){
            if(!vis[i]){
                toposort(i,vis,adj,s);
            }
        }
        
        ArrayList<ArrayList<Integer>> transpose=new ArrayList<>();
        for(int i=0;i<V;i++){
            transpose.add(new ArrayList<Integer>());
        }
        for(int i=0;i<adj.size();i++){
            vis[i]=false;
            for(Integer j:adj.get(i)){
                transpose.get(j).add(i);
            }
        }
        int count=0;
        while(!s.isEmpty()){
            int node=s.pop();
            if(!vis[node]){
                dfs(node,vis,transpose);
                count++;
            }
        }
        return count;
    }
    public void toposort(int node,boolean[] vis,ArrayList<ArrayList<Integer>> adj, Stack<Integer> s){
        vis[node]=true;
        for(Integer n:adj.get(node)){
            if(!vis[n]){
                toposort(n,vis,adj,s);
            }
        }
        s.push(node);
    }
    public void dfs(int node,boolean[] vis,ArrayList<ArrayList<Integer>> adj){
        vis[node]=true;
        for(Integer n:adj.get(node)){
            if(!vis[n]){
                dfs(n,vis,adj);
            }
        }
        
    }
}
