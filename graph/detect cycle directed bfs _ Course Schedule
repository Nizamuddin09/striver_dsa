class Solution {
    // Function to detect cycle in a directed graph.
    public boolean isCyclic(int V, ArrayList<ArrayList<Integer>> adj) {
        // code here
         int[] indegree = new int[V];
        for(int i=0;i<adj.size();i++){
            for(Integer n:adj.get(i)){
                indegree[n]++;
            }
        }
        Queue<Integer> q=new LinkedList<>();
        for(int i=0;i<V;i++){
            if(indegree[i]==0){
                q.add(i);
            }
        }
        int cnt=0;
        int ind=0;
        while(!q.isEmpty()){
            Integer node=q.poll();
            cnt++;
            for(Integer n:adj.get(node)){
                indegree[n]--;
                if(indegree[n]==0){
                    q.add(n);
                }
            }
        }
        return cnt!=V;
    }
}

----------------------------------------------reverse problem leetcode



class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        List<List<Integer>> adj=new ArrayList<>();
        for(int i=0;i<numCourses;i++){
            adj.add(new ArrayList<Integer>());
        }
        for(int i=0;i<prerequisites.length;i++){
            adj.get(prerequisites[i][1]).add(prerequisites[i][0]);
        }
        int V=numCourses;
        int[] indegree = new int[V];
        for(int i=0;i<adj.size();i++){
            for(Integer n:adj.get(i)){
                indegree[n]++;
            }
        }
        Queue<Integer> q=new LinkedList<>();
        for(int i=0;i<V;i++){
            if(indegree[i]==0){
                q.add(i);
            }
        }
        int cnt=0;
        int ind=0;
        while(!q.isEmpty()){
            Integer node=q.poll();
            cnt++;
            for(Integer n:adj.get(node)){
                indegree[n]--;
                if(indegree[n]==0){
                    q.add(n);
                }
            }
        }
        return cnt==V;
    }

}
