//{ Driver Code Starts
import java.util.*;
import java.io.*;
import java.lang.*;

class DriverClass {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();

        while (t-- > 0) {
            ArrayList<ArrayList<Integer>> list = new ArrayList<>();
            int V = sc.nextInt();
            int E = sc.nextInt();
            for (int i = 0; i < V; i++)
                list.add(i, new ArrayList<Integer>());
            for (int i = 0; i < E; i++) {
                int u = sc.nextInt();
                int v = sc.nextInt();
                list.get(u).add(v);
            }
            if (new Solution().isCyclic(V, list) == true)
                System.out.println("1");
            else
                System.out.println("0");
        }
    }
}
// } Driver Code Ends


/*Complete the function below*/

class Solution {
    // Function to detect cycle in a directed graph.
    public boolean isCyclic(int V, ArrayList<ArrayList<Integer>> adj) {
        // code here
        boolean vis[]=new boolean[V];
        boolean dfs[]=new boolean[V];
        for(int i=0;i<V;i++){
            if(!vis[i]){
                if(checkCycle(i,vis,dfs,adj)){
                    return true;
                }
            }
        }
        return false;
    }
    public boolean checkCycle(int src,boolean vis[],boolean dfs[],ArrayList<ArrayList<Integer>> adj){
        vis[src]=true;
        dfs[src]=true;
        for(Integer n:adj.get(src)){
            if(!vis[n]){
                if(checkCycle(n,vis,dfs,adj)){
                    return true;
                }
            }
            else{
                if(dfs[n]){
                    return true;
                }
            }
        }
        dfs[src]=false;
        return false;
    }
}




---------------------------------------------------------------------------------------------------------------




class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        List<List<Integer>> adj=new ArrayList<>();
        for(int i=0;i<numCourses;i++){
            adj.add(new ArrayList<Integer>());
        }
        for(int i=0;i<prerequisites.length;i++){
            adj.get(prerequisites[i][1]).add(prerequisites[i][0]);
        }
        boolean vis[]=new boolean[numCourses];
        boolean dfs[]=new boolean[numCourses];
        for(int i=0;i<numCourses;i++){
            if(!vis[i]){
                if(checkCycle(i,vis,dfs,adj)){
                    return false;
                }
            }
        }
        return true;
    }
    public boolean checkCycle(int src,boolean vis[],boolean dfs[],List<List<Integer>> adj){
        vis[src]=true;
        dfs[src]=true;
        for(Integer n:adj.get(src)){
            if(!vis[n]){
                if(checkCycle(n,vis,dfs,adj)){
                    return true;
                }
            }
            else{
                if(dfs[n]){
                    return true;
                }
            }
        }
        dfs[src]=false;
        return false;
    }
}
