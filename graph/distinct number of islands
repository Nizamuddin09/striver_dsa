dfs horizontal vertical only


class Solution {

    int countDistinctIslands(int[][] grid) {
        // Your Code here
        int n=grid.length;
        int m=grid[0].length;
        boolean[][] vis=new boolean[n][m];
        HashSet<List<String>> s=new HashSet<>();
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(!vis[i][j] && grid[i][j]==1){
                    List<String> island=new ArrayList<String>();
                    dfs(i,j,vis,grid,i,j,island);
                    s.add(island);
                }
            }
        }
        return s.size();
    }
   private String toString(int r, int c) {
    return Integer.toString(r) + " " + Integer.toString(c);
  }
    public void dfs(int row,int col, boolean[][] vis,int[][] grid,int row0,int col0,List<String> island){
        vis[row][col]=true;
        island.add(toString(row-row0,col-col0));
        int n=grid.length;
        int m=grid[0].length;
        int[] delRow={-1,0,1,0};
        int[] delCol={0,-1,0,1};
        for(int i=0;i<4;i++){
            int newRow=row+delRow[i];
            int newCol=col+delCol[i];
            if(newRow>=0 && newRow<n && newCol>=0 && newCol<m){
                if(!vis[newRow][newCol] && grid[newRow][newCol]==1){
                    dfs(newRow,newCol,vis,grid,row0,col0,island);
                }
            }
        }
    }
}

class Pair{
    int first;
    int second;
    Pair(int first,int second){
        this.first=first;
        this.second=second;
    }
}
