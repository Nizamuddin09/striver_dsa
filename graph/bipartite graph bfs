gfg 


class Solution
{
    public boolean isBipartite(int V, ArrayList<ArrayList<Integer>>adj)
    {
        // Code here
        int color[]=new int[V];
        Arrays.fill(color, -1);
        for(int i=0;i<V;i++){
            if(color[i]==-1){
                if(bfs(i,color,adj)==false){
                 return false;   
                }
            }
        }
        return true;
    }
    public boolean bfs(int src,int color[], ArrayList<ArrayList<Integer>>adj){
        color[src]=0;
        Queue<Integer> q=new LinkedList<>();
        q.add(src);
        while(!q.isEmpty()){
            int node=q.poll();
            for(int n:adj.get(node)){
                if(color[n]==-1){
                    color[n]=color[node]^1;
                    q.add(n);
                }
                else if(color[n]==color[node]){
                    return false;
                }
            }
        }
        return true;
    }
}



-------------------
leetcode


class Solution {
    public boolean isBipartite(int[][] graph) {
         // Code here
         int V=graph.length;
        int color[]=new int[V];
        Arrays.fill(color, -1);
        for(int i=0;i<V;i++){
            if(color[i]==-1){
                if(bfs(i,color,graph)==false){
                 return false;   
                }
            }
        }
        return true;
    }
    public boolean bfs(int src,int color[], int[][] graph){
        color[src]=0;
        Queue<Integer> q=new LinkedList<>();
        q.add(src);
        while(!q.isEmpty()){
            int node=q.poll();
            for(int n:graph[node]){
                if(color[n]==-1){
                    color[n]=color[node]^1;
                    q.add(n);
                }
                else if(color[n]==color[node]){
                    return false;
                }
            }
        }
        return true;
    }
}
