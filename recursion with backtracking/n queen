class Solution {
    public List<List<String>> solveNQueens(int n) {
        List<List<String>> res=new ArrayList<List<String>>();
        char[][] board=new char[n][n];
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                board[i][j]='.';
            }
        }
        int leftRow[] = new int[n];
        int upperDiagonal[] = new int[2 * n - 1];
        int lowerDiagonal[] = new int[2 * n - 1];
        helper(res,board,0,n,leftRow,upperDiagonal,lowerDiagonal);
        return res;
    }
    public void helper(List<List<String>> res,char[][] board,int col,int n,int[] leftRow,int[] upperDiagonal,int[] lowerDiagonal){
        if(col==n){
            res.add(construct(board));
            return;
        }
        for(int i=0;i<n;i++){
            //if(isSafe(board,i,col,n))
            if(leftRow[i]==0 && upperDiagonal[n-1+col-i]==0 && lowerDiagonal[i+col]==0)
            {
                board[i][col]='Q';
                leftRow[i]=1;
                upperDiagonal[n-1+col-i]=1;
                lowerDiagonal[i+col]=1;
                helper(res,board,col+1,n,leftRow,upperDiagonal,lowerDiagonal);
                leftRow[i]=0;
                upperDiagonal[n-1+col-i]=0;
                lowerDiagonal[i+col]=0;
                board[i][col]='.';
            }
        }
    }
    public List<String> construct(char[][] board){
       List < String > ans = new LinkedList < String > ();
        for (int i = 0; i < board.length; i++) {
            String s = new String(board[i]);
            ans.add(s);
        }
        return ans;
    }
    
    // public boolean isSafe(char[][] board,int row,int col,int n){
    //     for(int i=0;i<n;i++){
    //         for(int j=0;j<col;j++){
    //             if(board[i][j]=='Q' && (row-i==col-j || row==i || row-i==j-col)){
    //                 return false;
    //             }
    //         }
    //     }
    //     return true;
    // }
    
}
