//{ Driver Code Starts
import java.util.*;
import java.lang.*;
import java.io.*;

class GFG {
    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        int tc = scan.nextInt();

        while (tc-- > 0) {
            int N = scan.nextInt();
            int M = scan.nextInt();
            int E = scan.nextInt();

            boolean graph[][] = new boolean[N][N];

            for (int i = 0; i < E; i++) {
                int u = scan.nextInt() - 1;
                int v = scan.nextInt() - 1;
                graph[u][v] = true;
                graph[v][u] = true;
            }

            System.out.println(new solve().graphColoring(graph, M, N) ? 1 : 0);
        }
    }
}

// } Driver Code Ends


class solve {
    // Function to determine if graph can be coloured with at most M colours
    // such
    // that no two adjacent vertices of graph are coloured with same colour.
    public boolean graphColoring(boolean graph[][], int m, int n) {
        // Your code here
        List<List<Integer>> adj=new ArrayList<>();
        for(int i=0;i<n;i++){
            adj.add(new ArrayList<>());
        }
        for(int i=0;i<graph.length;i++){
            for(int j=0;j<graph[i].length;j++){
                if(graph[i][j]==true){
                    adj.get(i).add(j);
                    adj.get(j).add(i);
                }
            }
        }
        int color[]=new int[n];
        return helper(0,color,m,n,adj);
    }
    public boolean helper(int node,int[] color,int m,int n,List<List<Integer>> adj){
        if(node==n){
            return true;
        }
        for(int i=1;i<=m;i++){
            if(possible(node,i,color,adj)){
                color[node]=i;
                if(helper(node+1,color,m,n,adj)) return true;
                color[node]=0;
            }
        }
        return false;
    }
    public boolean possible(int node,int col,int[] color,List<List<Integer>> adj){
        List<Integer> res=adj.get(node);
        for(Integer c:res){
            if(color[c]==col){
                return false;
            }
        }
        return true;
    }
}
