class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int m=matrix.length;
        int n=matrix[0].length;
 
 double binary search 
//         int top=0;int bot=m-1;
//         while(top<=bot){
//            int row=(top+(bot-top)/2);
//             if(matrix[row][n-1]<target){
//                 top=row+1;
//             }
//             else if(matrix[row][0]>target){
//                 bot=row-1;
//             }
//             else{
//                 break;
//             }
            
//         }
//         if(top>bot){
//             return false;
//         }
//         int row=(top+(bot-top)/2);
//         int low=0;
//         int high=n-1;
//         while(low<=high){
//            int mid=low+(high-low)/2;
//             if(matrix[row][mid]==target){
//                 return true;
//             }
//             else if(matrix[row][mid]>target){
//                 high=mid-1;
//             }
//             else{
//                 low=mid+1;
//             }
//         }
//         return false;
        
        * row wise and column wise sorted gfg , top right method *
        
//         int i=0,j=n-1;
//         while(i<m && j>=0){
//             if(matrix[i][j]==target){
//                 return true;
//             }
//             else if(matrix[i][j]>target){
//                 j--;
//             }
//             else{
//                 i++;
//             }
            
//         }
//         return false;
        
        
        * single binary search method , index formula intuition not derived *
        int low=0;int high=m*n-1;
        while(low<=high){
            int mid=low+(high-low)/2;
            if(matrix[mid/n][mid%n]==target){
                return true;
            }
            else if(matrix[mid/n][mid%n]>target){
                high=mid-1;
            }
            else{
                low=mid+1;
            }
        }
        return false;
    }
}
