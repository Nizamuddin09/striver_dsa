// class Solution {
//     public List<List<String>> partition(String s) {
//         List<List<String>> res=new ArrayList<List<String>>();
//         helper(res,new ArrayList<String>(),0,s);
//         return res;
//     }
//     public void helper(List<List<String>> res,ArrayList<String> ans,int ind,String s){
//         if(ind==s.length()){
//             res.add(new ArrayList<>(ans));
//             return;
//         }
//         for(int i=ind;i<s.length();i++){
//             if(isPalindrome(s,ind,i)){
//                 ans.add(s.substring(ind,i+1));
//                 helper(res,ans,i+1,s);
//                 ans.remove(ans.size()-1);
//             }
//         }
//     }
//     public boolean isPalindrome(String s,int start,int end){
//         while(start<end){
//             if(s.charAt(start)!=s.charAt(end)){
//                 return false;
//             }
//             start++;
//             end--;
//         }
//         return true;
//     }
// }
class Solution {
    public List<List<String>> partition(String s) {
        int len = s.length();
        boolean[][] dp = new boolean[len][len];
        List<List<String>> result = new ArrayList<>();
        dfs(result, s, 0, new ArrayList<>(), dp);
        return result;
    }

    void dfs(List<List<String>> result, String s, int start, List<String> currentList, boolean[][] dp) {
        if (start >= s.length()) result.add(new ArrayList<>(currentList));
        for (int end = start; end < s.length(); end++) {
            if (s.charAt(start) == s.charAt(end) && (end - start <= 1 || dp[start + 1][end - 1])) {
                dp[start][end] = true;
                currentList.add(s.substring(start, end + 1));
                dfs(result, s, end + 1, currentList, dp);
                currentList.remove(currentList.size() - 1);
            }
        }
    }
}
