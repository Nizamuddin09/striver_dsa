class Solution {
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        List<List<Integer>> res=new ArrayList<>();
        Arrays.sort(candidates);
       // helper(res,new ArrayList<Integer>(),0,candidates,target,false);
        helper(res,new ArrayList<Integer>(),0,candidates,target);
        return res;
    }
//     public void helper(List<List<Integer>> res,ArrayList<Integer> ans,int ind,int[] nums,int t,boolean prev){
//         if(ind==nums.length){
//             if(t==0){
//                 res.add(new ArrayList<>(ans));
//             }
//             return;
//         }
        
//         helper(res,ans,ind+1,nums,t,false);
        
//         if(ind>=1 && nums[ind]==nums[ind-1] && !prev) return;
 
//         if(nums[ind]<=t){
//             ans.add(nums[ind]);
//             helper(res,ans,ind+1,nums,t-nums[ind],true);
//             ans.remove(ans.size()-1);
//         }
 
//     }
    
    public void helper(List<List<Integer>> res,ArrayList<Integer> ans,int ind,int[] nums,int t){
        if(t==0){
            res.add(new ArrayList<>(ans));
        }
        for(int i=ind;i<nums.length;i++){
            if(i!=ind && nums[i]==nums[i-1]) continue;
            if(nums[i]>t) break;
            
            ans.add(nums[i]);
            helper(res,ans,i+1,nums,t-nums[i]);
            ans.remove(ans.size()-1);
        }
        
    }
}
